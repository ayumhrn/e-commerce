var cov_2qoyz173a9=function(){var path="/home/ayumhrn/Glint-task/MP_2/e_commerce2/models/user.js";var hash="aa70ae5cfeed816d48ba2c45a9f45a31758e969b";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/ayumhrn/Glint-task/MP_2/e_commerce2/models/user.js",statementMap:{"0":{start:{line:1,column:17},end:{line:1,column:36}},"1":{start:{line:2,column:15},end:{line:2,column:30}},"2":{start:{line:3,column:15},end:{line:3,column:32}},"3":{start:{line:4,column:19},end:{line:4,column:21}},"4":{start:{line:5,column:24},end:{line:5,column:60}},"5":{start:{line:7,column:19},end:{line:30,column:2}},"6":{start:{line:23,column:12},end:{line:23,column:102}},"7":{start:{line:32,column:0},end:{line:35,column:2}},"8":{start:{line:33,column:4},end:{line:33,column:63}},"9":{start:{line:34,column:4},end:{line:34,column:10}},"10":{start:{line:37,column:0},end:{line:37,column:86}},"11":{start:{line:39,column:13},end:{line:39,column:47}},"12":{start:{line:41,column:0},end:{line:41,column:22}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:22,column:18},end:{line:22,column:19}},loc:{start:{line:22,column:34},end:{line:24,column:9}},line:22},"1":{name:"(anonymous_1)",decl:{start:{line:32,column:23},end:{line:32,column:24}},loc:{start:{line:32,column:38},end:{line:35,column:1}},line:32}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},f:{"0":0,"1":0},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"aa70ae5cfeed816d48ba2c45a9f45a31758e969b"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const mongoose=(cov_2qoyz173a9.s[0]++,require('mongoose'));const Schema=(cov_2qoyz173a9.s[1]++,mongoose.Schema);const bcrypt=(cov_2qoyz173a9.s[2]++,require('bcrypt'));const saltRounds=(cov_2qoyz173a9.s[3]++,10);const uniqueValidator=(cov_2qoyz173a9.s[4]++,require('mongoose-unique-validator'));const userSchema=(cov_2qoyz173a9.s[5]++,new Schema({_id:mongoose.Schema.Types.ObjectId,username:{type:String,unique:true,required:[true,'You must have a username!']},name:{type:String,required:true},email:{type:String,unique:true,required:true,validate:function(email){cov_2qoyz173a9.f[0]++;cov_2qoyz173a9.s[6]++;return /^[a-zA-Z0-9.!#$%&â€™*+\/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/.test(email);}},password:{type:String,min:8}}));cov_2qoyz173a9.s[7]++;userSchema.pre('save',function(next){cov_2qoyz173a9.f[1]++;cov_2qoyz173a9.s[8]++;this.password=bcrypt.hashSync(this.password,saltRounds);cov_2qoyz173a9.s[9]++;next();});cov_2qoyz173a9.s[10]++;userSchema.plugin(uniqueValidator,{message:'Error, expected {PATH} to be unique.'});const user=(cov_2qoyz173a9.s[11]++,mongoose.model('user',userSchema));cov_2qoyz173a9.s[12]++;module.exports=user;